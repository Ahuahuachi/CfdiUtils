version: "{branch}-{build}"
build: false
platform: x64
clone_folder: c:\projects\project
clone_depth: 1

cache:
    - C:\ProgramData\chocolatey\bin -> .appveyor.yml
    - C:\ProgramData\chocolatey\lib -> .appveyor.yml
    - C:\tools\php -> .appveyor.yml
    - C:\tools\composer -> .appveyor.yml
    - '%LOCALAPPDATA%\Composer\files -> .appveyor.yml'

## Build matrix for lowest and highest possible targets
environment:
    matrix:
        - php: 7.0
        - php: 7.1
        - php: 7.2
        - php: 7.3

init:
    - SET PATH=c:\tools\php;C:\tools\composer;C:\OpenSSL-v111-Win64\bin;%PATH%
    - SET COMPOSER_NO_INTERACTION=1
    - SET ANSICON="121x90 (121x90)"
    - SET saxonb-path=C:\ProgramData\chocolatey\bin\SaxonHE\bin\Transform.exe

## Check for openssl, install php using version environment, install
install:
    # check openssl exists and run from PATH
    - openssl version
    # php is not cached because this script change versions
    - ps: |
          # Retrieve version from choco using php environment variable
          $php_install_version = (( `
              choco search php --exact --all-versions -r `
                  | Select-String -Pattern $env:php `
                  | Sort-Object { [version]($_ -Split '\|' | Select-Object -Last 1) } -Descending `
                  | Select-Object -First 1 `
              ) -Replace '[php|]', '')
          Write-Host "Required PHP Version: $php_install_version"

          # install php on C:\tools\php
          appveyor-retry choco install --ignore-checksums --params='""/InstallDir:C:\tools\php""' `
              php --version $php_install_version --yes --force

          # setup c:\tools\php\php.ini
          if (! (Test-Path c:\tools\php\php.ini)) {
              Copy-Item -Path c:\tools\php\php.ini-production -Destination c:\tools\php\php.ini
              Add-Content c:\tools\php\php.ini "`
                  `n; PHP Custom config `
                  date.timezone=UTC `
                  extension_dir=ext `
                  memory_limit=1G `
                  extension=php_openssl `
                  extension=php_mbstring `
                  extension=php_fileinfo `
                  extension=php_curl `
                  extension=php_xsl `
                  extension=php_soap `
                  "
          }

          # show contents of extension directory
          Get-ChildItem -Path c:\tools\php\ext

          # show php information
          php -i
    # composer
    - ps: |
          if (! (Test-Path c:\tools\composer\composer.phar)) {
              New-Item -ItemType Directory -Force -Path c:\tools\composer
              appveyor-retry appveyor DownloadFile https://getcomposer.org/composer.phar -Filename C:\tools\composer\composer.phar
              Set-Content -Path 'C:\tools\composer\composer.bat' -Value ('@php C:\tools\composer\composer.phar %*')
          } else {
              appveyor-retry composer self-update --no-progress --no-interaction
          }
          composer --version
    # saxonb
    - ps: |
          if (! (Test-Path ${Env:saxonb-path})) {
              appveyor-retry choco install --ignore-checksums --yes saxonhe
          }

    # install project dependences and list available tools
    - cd c:\projects\project
    - appveyor-retry composer install --no-progress --no-interaction --prefer-dist
    - dir vendor\bin

## Run the actual test
test_script:
    - cd c:\projects\project
    - mkdir build
    - vendor\bin\phplint.bat
    - vendor\bin\phpcs.bat -sp src tests
    - vendor\bin\php-cs-fixer.bat fix --dry-run --verbose
    - if "%php%"=="7.0" vendor\bin\phpunit.bat --verbose
    - if not "%php%"=="7.0" vendor\bin\phpunit.bat --testdox --verbose
    - if "%php%"=="7.3" vendor\bin\phpstan.phar.bat --no-progress analyse --level max src tests
