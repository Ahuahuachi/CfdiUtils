version: "{branch}-{build}"
build: false
platform: x64
clone_folder: c:\projects\project
clone_depth: 1

## Build matrix for lowest and highest possible targets
environment:
    matrix:
        - php: 7.0
        - php: 7.1
        - php: 7.2

cache:
    - C:\ProgramData\chocolatey\bin -> .appveyor.yml
    - C:\ProgramData\chocolatey\lib -> .appveyor.yml

init:
    - SET PATH=C:\Program Files\OpenSSL;c:\tools\php;C:\tools\composer;%PATH%
    - SET COMPOSER_NO_INTERACTION=1
    - SET ANSICON=121x90 (121x90)

## Install PHP and composer, and run the appropriate composer command
install:
    # php
    - ps: |
        # Check if installation is cached
        if (!(Test-Path c:\tools\php)) {
            appveyor-retry cinst --params '""/InstallDir:C:\tools\php""' --ignore-checksums -y php --version ((choco search php --exact --all-versions -r | select-string -pattern $env:php | sort { [version]($_ -split '\|' | select -last 1) } -Descending | Select-Object -first 1) -replace '[php|]','')
            # # install sqlite
            # appveyor-retry cinst -y sqlite
            Get-ChildItem -Path c:\tools\php
            cd c:\tools\php
            # Set PHP environment items that are always needed
            copy php.ini-production php.ini
            Add-Content php.ini "`n date.timezone=UTC"
            Add-Content php.ini "`n extension_dir=ext"
            Add-Content php.ini "`n memory_limit=1G"
            Add-Content php.ini "`n extension=php_openssl.dll"
            Add-Content php.ini "`n extension=php_mbstring.dll"
            Add-Content php.ini "`n extension=php_fileinfo.dll"
            # Add-Content php.ini "`n extension=php_pdo_sqlite.dll"
            # Add-Content php.ini "`n extension=php_sqlite3.dll"
            Add-Content php.ini "`n extension=php_curl.dll"
            Add-Content php.ini "`n extension=php_xsl.dll"
            Add-Content php.ini "`n extension=php_soap.dll"
        }
    # composer
    - ps: |
        # download Composer
        if (!(Test-Path C:\tools\composer)) {
            New-Item -path c:\tools -name composer -itemtype directory
        }
        if (!(Test-Path c:\tools\composer\composer.phar)) {
            appveyor-retry appveyor DownloadFile https://getcomposer.org/composer.phar -Filename C:\tools\composer\composer.phar
            Set-Content -path 'C:\tools\composer\composer.bat' -Value ('@php C:\tools\composer\composer.phar %*')
        }
    # install composer dependences
    - cd c:\projects\project
    - appveyor-retry composer install --no-interaction --prefer-dist

## Run the actual test
test_script:
    - cd c:\projects\project
    - mkdir build
    - php vendor\bin\phplint
    - php vendor\bin\phpcs -sp src tests
    - php vendor\bin\php-cs-fixer fix --using-cache=no --dry-run --verbose
    - php vendor\bin\phpunit
    - php vendor\bin\phpstan.phar --no-progress analyse --level max src tests
